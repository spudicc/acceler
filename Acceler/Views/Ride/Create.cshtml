<!-- Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<!-- Flatpickr JS -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<link rel="stylesheet" href="~/Content/Ride/createRide.css">


@model Acceler.Models.Ride

@{
    ViewBag.Title = "Create";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <h2>Kreiraj novu vožnju!</h2>

    <div id="ride_name_div">
        <h1>Prvo nadjeni ime svojoj novoj spektakularnoj vožnji!</h1>
        <div>
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "editor_for_name" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
        <button id="btn_name_dalje" class="btn_dalje" type="button">Dalje</button>
    </div>

    <div id="ride_date_div" style="display:none">
        <h1>Sada izaberi vrijeme polaska...</h1>
        <div>
            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "editor_for_name", type = "text", id = "flatpickr" } })
            <span class="input-group-addon">
                <span class="glyphicon glyphicon-calendar"></span>
            </span>
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })

        </div>
        <button id="btn_date_dalje" class="btn_dalje" type="button">Dalje</button>
    </div>

    <div id="ride_map_div" style="display:none;">
        <h3 id="instructions_h">Prvo možeš označiti polazište, a onda destinaciju.</h3>
        <div class="map-placeholder" style="display: flex; justify-content: center;">
            <div id="map" class="allMaps" style="height:80vh; width: 80%" ;"></div>
        </div>
        <div style="display: flex; flex-direction: column; align-items: center;">
        @Html.LabelFor(model => model.StartingPointLatitude, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.StartingPointLatitude, new { htmlAttributes = new { @class = "form-control", id = "startingPointLatitude" } })
            @Html.ValidationMessageFor(model => model.StartingPointLatitude, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.StartingPointLongitude, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.StartingPointLongitude, new { htmlAttributes = new { @class = "form-control", id = "startingPointLongitude" } })
            @Html.ValidationMessageFor(model => model.StartingPointLongitude, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EndingPointLatitude, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.EndingPointLatitude, new { htmlAttributes = new { @class = "form-control", id = "endingPointLatitude" } })
            @Html.ValidationMessageFor(model => model.EndingPointLatitude, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EndingPointLongitude, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.EndingPointLongitude, new { htmlAttributes = new { @class = "form-control", id = "endingPointLongitude" } })
            @Html.ValidationMessageFor(model => model.EndingPointLongitude, "", new { @class = "text-danger" })
        </div>

        <button id="btn_map_dalje" class="btn_dalje" type="button">Dalje</button>
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.AvoidHighways, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.AvoidHighways, new { id = "avoidHighways", value = false })
                    @Html.ValidationMessageFor(model => model.AvoidHighways, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@

    <div id="ride_submit_div" style="display:none;">
        <h1>Spremni smo kada i ti!</h1>
        <input type="submit" value="Create" class="btn_dalje" />
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section scripts {
    <script>
        flatpickr('#flatpickr', {
            dateFormat: 'd-m-Y',
            enableTime: true
        });
    </script>
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var btnNameDalje = document.getElementById("btn_name_dalje");
        var btnDateDalje = document.getElementById("btn_date_dalje");
        var btnMapDalje = document.getElementById("btn_map_dalje");
        var rideNameDiv = document.getElementById("ride_name_div");
        var rideMapDiv = document.getElementById("ride_map_div");
        var rideDateDiv = document.getElementById("ride_date_div");
        var submitDiv = document.getElementById("ride_submit_div");


        if (btnNameDalje && rideNameDiv) {
            btnNameDalje.addEventListener("click", function () {
                rideNameDiv.style.display = "none";
                rideDateDiv.style.display = "flex";
            });
        }

        if (btnDateDalje && rideDateDiv) {
            btnDateDalje.addEventListener("click", function () {
                rideDateDiv.style.display = "none";
                rideMapDiv.style.display = "block";
            });
        }

        if (btnMapDalje && rideMapDiv) {
            btnMapDalje.addEventListener("click", function () {
                rideMapDiv.style.display = "none";
                submitDiv.style.display = "flex";
            });
        }
    });
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyApOmG9SZxHFO1__cGEGaeDaCPJtbVtV1w&callback=initMap&v=weekly"
        defer></script>

<script>
    async function initMap() {
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
        const directionsRenderer = new google.maps.DirectionsRenderer();
        const directionsService = new google.maps.DirectionsService();
        const map = new google.maps.Map(document.getElementById("map"), {
            zoom: 9,
            center: { lat: 45.8150, lng: 15.9819 },
            mapId: "DEMO_MAP_ID",
            mapTypeId: 'roadmap',
        });

        directionsRenderer.setMap(map);

        var counter = 0;
        var allMarkers = [];
        var allWaypoints = [];
        var routeCalculated = false;

        map.addListener('click', function (e) {
            console.log('markers before add', allMarkers.length)
            console.log('waypoints before add', allMarkers.length)
            if (allMarkers.length < 2) {
                selectedlat = e.latLng.lat();
                selectedlng = e.latLng.lng();

                const marker = new AdvancedMarkerElement({
                    map: map,
                    position: { lat: selectedlat, lng: selectedlng },
                    draggable: true,
                });
                allMarkers.push(marker);

                switch (allMarkers.length) {
                    case 1:
                        $('#startingPointLatitude').val(selectedlat);
                        $('#startingPointLongitude').val(selectedlng);
                        console.log("Updated value:", $('#startingPointLatitude').val());
                        //document.getElementById("startingPointLatitude").val = selectedlat;
                        //document.getElementById("startingPointLongitude").val = selectedlng;
                        break;
                    case 2:
                        $('#endingPointLatitude').val(selectedlat);
                        $('#endingPointLongitude').val(selectedlng);
                        //document.getElementById("endingPointLatitude").value = selectedlat;
                        //document.getElementById("endingPointLongitude").value = selectedlng;
                        break;
                    default:
                        break;
                }
                console.log('markers after add', allMarkers.length)

                marker.addListener('click', function (e) {
                    marker.setMap(null);
                    allMarkers.splice(allMarkers.indexOf(marker), 1);
                });
                if (allMarkers.length == 2) {
                    console.log(marker);
                    calculateAndDisplayRoute(directionsService, directionsRenderer, allMarkers, allWaypoints);
                    routeCalculated = true;
                    document.getElementById("instructions_h").textContent = "Sada označi usputne točke ako ih ima.";
                    map.addListener('click', function (e) {
                        selectedlat = e.latLng.lat();
                        selectedlng = e.latLng.lng();
                        const waypoint = { location: { lat: selectedlat, lng: selectedlng } }
                        allWaypoints.push(waypoint);
                        calculateAndDisplayRoute(directionsService, directionsRenderer, allMarkers, allWaypoints);
                    })
                }
            }
            else {
                console.log("cant go bruv");
            }
        });
    }
    //calculateAndDisplayRoute(directionsService, directionsRenderer);


    //document.getElementById("mode").addEventListener("change", () => {
    //    calculateAndDisplayRoute(directionsService, directionsRenderer);
    //});

    function calculateAndDisplayRoute(directionsService, directionsRenderer, allMarkers, waypoints) {
        var validationMessageElement = document.getElementById("avoidHighways");
        console.log(validationMessageElement);

        directionsService
            .route({
                origin: new google.maps.LatLng(allMarkers[0].position),
                destination: new google.maps.LatLng(allMarkers[1].position),
                travelMode: "DRIVING",
                waypoints: waypoints
                //avoidHighways: model.avoidHighways
            })
            .then((response) => {
                directionsRenderer.setDirections(response);
                console.log(response);
            })
        /*.catch((e) => window.alert("Directions request failed due to " + error));*/
    }

    window.initMap = initMap;

</script>
